#!/usr/bin/python
#mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
#2222222222222222222222
#20200409 velocity already generated by 1_5.py
#and the merger time is also generated
#need to read par.csv and IRZ and IVSYS
#it will output Final R and Final Z (two seperated files) that contains the special coordinates at each time
#the index in the Final R file and Z is only index rather than real time
#to calculate real time should cheak par.py file's "ft"
#generate velocity
#calculate orbit in MW
print("begin")
import numpy as np
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
from matplotlib import colors
import galpy.potential
from galpy.orbit import Orbit
import numpy
from galpy.potential import KeplerPotential
from galpy.util import bovy_conversion
from galpy.potential import PowerSphericalPotentialwCutoff
from galpy.potential import MiyamotoNagaiPotential
from galpy.potential import NFWPotential
from astropy import units
from galpy.potential import evaluatePotentials
from galpy.potential import plotRotcurve
import math
from galpy.potential import plotPotentials
import random
from galpy.potential import evaluateDensities
from galpy.potential import MWPotential2014
import csv
import pandas as pd
import imageio
import math
import os
import time 
import shutil
from galpy.potential import vcirc
from allfuc import *

if 'HOME' not in os.environ:
    import pwd
    userhome = pwd.getpwuid(os.getuid()).pw_dir
else:
    userhome = os.environ['HOME']

"""
#galpy origional   ############################
bpg= PowerSphericalPotentialwCutoff(alpha=1.8,rc=1.9/8.,normalize=0.05)
mpg= MiyamotoNagaiPotential(a=3./8.,b=0.28/8.,normalize=.6)
npg= NFWPotential(a=16/8.,normalize=.35)
MWPotential2014g= [bpg,mpg,npg]
MWPotential2014gwBH= [MWPotential2014g,KeplerPotential(amp=4*10**6./bovy_conversion.mass_in_msol(220.,8.))]
#generate a New born DNS
# limit unit kpc  density 3 solarmass/ pc3
"""

#read parameter   #########################################
Par = pd.read_csv("/hetghome/jordan/miop/par.csv")
for i in Par:
    #print(i)
    #print(Par[i][0])
    if Par[i][0] != Par['lt'][0]:
        Par[i][0] = float(Par[i][0])

ft = Par.ft[0]
vs = Par.vs[0]
dlmv = int(Par.dlmv[0])  #maximan vsys meg
dlmvg = int(Par.dlmvg[0])  #grid of max vsys meg
"""  20200317 modified
number of the grid velo not 
# particulary vsys or vk"""
ss = Par.ss[0]
r0 = Par.r0[0]
v0 = Par.v0[0]
vg = Par.vvgg[0]
Vku = Par.Vku[0]
M2 = Par.M2[0]
Ai = Par.Ai[0]
MHe = Par.MHe[0]
M1 = Par.MHe[0]
MNS = Par.MNS[0]
SiM1 = FSiSM(M1)
SiMHe = FSiSM(MHe)
SiM2 = FSiSM(M2)
SiMNS = FSiSM(MNS)
SiAi = FSiSR(Ai)
lt = Par["lt"][0]
print(Par)

#Path("/hetghome/jordan/iop/"+lt+"/RZD").mkdir(exist_ok=True)
if not os.path.exists("/hetghome/jordan/miop/"+lt+"/RZD"):
    os.makedirs("/hetghome/jordan/miop/"+lt+"/RZD")
"""ft = 0.15
vs = 50
dlmv = 300
dlmvg = 1
ss = 40
v0 = 220
r0 = 8"""
#read file  #############################
IRZ = pd.read_csv("/hetghome/jordan/miop/"+lt+"/IRZ.csv")
R = IRZ.initialR
Z = IRZ.initialz
#start to make object move ############################
dlmvg = int(dlmvg)
#ts= numpy.linspace(0,ft/bovy_conversion.time_in_Gyr(v0,r0),1000)
co = ['g','r','c','m','b']
print("range(dlmvg)="+str(range(int(dlmvg))))

for v in range(dlmvg):
    v = v+1
    #v is an integer for the nth velocity
    SiVbr = FVbr(SiMHe,SiM2,SiAi)    #in si unit m/s  #binary relative velocity
    kmVbr = SiVbr/1000.0  #Vbr in km/s
    MV = Vku*v
    Vk = MV
    VVV = []
    VV = []   #megnitude of vsys
    VVR = []  #radial velo in MW
    VVZ = []  #velocity z in MW
    VVT = []
    KVT = []
    frt = [[] for _ in range(dlmvg)]
    fzt = [[] for _ in range(dlmvg)]
    #PHI = []
    #THE = []
    V = []
    VR = []
    VZ = []
    print("v="+str(v))
    fR = [[] for _ in range(len(R))]
    fZ = [[] for _ in range(len(R))]
    IVSYS = pd.read_csv("/hetghome/jordan/miop/"+str(lt)+"/IVSYS_MVk~"+str(Vk)+".csv")
    VSYS = IVSYS.VsysMeg_kms
    Bod = IVSYS.Bond
    MMT = pd.read_csv("/hetghome/jordan/miop/"+str(lt)+"/MT_Mvk~"+str(Vk)+".csv")
    MT = MMT.MT_sec   #merger time in sec
    LMT = MT.max(axis = 0, skipna = True)
    LMTGyr = FStGyr(LMT)
    #ts= numpy.linspace(0,LMTGyr/bovy_conversion.time_in_Gyr(v0,r0),1000)
    ts= numpy.linspace(0,ft/bovy_conversion.time_in_Gyr(v0,r0),1000)
    for i in range(len(R)):
        phi = random.uniform(0,2* math.pi)
        theta = math.acos(1-2*random.uniform(0, 1))
        #since the binary plane is isotropic to MW
        #so I generate another theta and phi here
        """20200317 modified
        
        #phi = 0.0
        #theta = 0.0
        PHI.append(phi)
        THE.append(math.cos(theta))
	    #vv = 3.08567758/3.15581
	    #the unit is in the integration!!!!!!
        vv = (v+1)/dlmvg*dlmv+random.uniform(-1, 1)*vs
        #1kpc = 3.08*10^16 seckm
	    #1 Gyr = 3.16*10^16 """
        vv = VSYS[i]
        if np.isnan(MT[i]) == False:
            mt = MT[i]
            #this vr is the radial velocity in MW not relative velo
            vr = (vv*math.sin(theta)*math.cos(phi))
            vz = (vv*math.cos(theta))
            vt = vv*math.sin(theta)*math.sin(phi) + vcirc(MWPotential2014,(R[i])*units.kpc)*v0
            kvt = (vv*math.sin(theta)*math.sin(phi))   #tangent velo only without the circular velo in MW
            o = Orbit([R[i]*units.kpc,vr*units.km/units.s,vt*units.km/units.s,Z[i]*units.kpc,vz*units.km/units.s])
            #vxvv=[R,vR,vT,z,vz ,phi]
            o.integrate(ts,MWPotential2014,method='odeint')
            VV.append((vr**2+vz**2+vt**2)**0.5)
            VVZ.append(vz)
            VVR.append(vr)
            VVT.append(vt)
            VVV.append(vv)
            KVT.append(kvt)
            frt[v-1].append(o.R(ft/bovy_conversion.time_in_Gyr(v0,r0)))
            fzt[v-1].append(o.z(ft/bovy_conversion.time_in_Gyr(v0,r0)))
            print(o.z(ft/bovy_conversion.time_in_Gyr(v0,r0)))
            for t in range(int(ss)):
                #print(t*ft/ss)
                fr = o.R((t+1)*ft/ss/bovy_conversion.time_in_Gyr(v0,r0))
                fz = o.z((t+1)*ft/ss/bovy_conversion.time_in_Gyr(v0,r0))
                fR[i].append(fr)
                fZ[i].append(fz)
        else:
            VV.append(np.nan)
            VVZ.append(np.nan)
            VVR.append(np.nan)
            VVT.append(np.nan)
            VVV.append(np.nan)
            KVT.append(np.nan)
            frt[v-1].append(np.nan)
            fzt[v-1].append(np.nan)
            print(np.nan)
            for t in range(int(ss)):
                #print(t*ft/ss)
                """fr = o.R(np.nan)
                fz = o.z(np.nan)"""
                fR[i].append(np.nan)
                fZ[i].append(np.nan)

    print("orbit fin")
    FR = pd.DataFrame(fR)
    FR.to_csv('/hetghome/jordan/miop/'+lt+'/'+str(((v+1)*dlmv/dlmvg))+'FR.csv', index = False)
    print(str(((v+1)*dlmv/dlmvg))+'FR.csv')
    FZ = pd.DataFrame(fZ)
    FZ.to_csv('/hetghome/jordan/miop/'+lt+'/'+str(((v+1)*dlmv/dlmvg))+'FZ.csv', index = False)
    ######################################
    DATA = pd.DataFrame(VVZ, columns = ['Vz wo Vrot'])
    DATA.insert(1, "Vsys w Vrot", VV)
    DATA.insert(1, "Vr  wo Vrot", VVR)
    DATA.insert(1, "Vt w Vrot", VVT)
    DATA.insert(1, "Vt wo Vrot", KVT)
    DATA.insert(1, "Vsys wo Vrot", VVV)
    #DATA.insert(1, "PHI", PHI)
    #DATA.insert(1, "THE", THE)
    DATA.to_csv('/hetghome/jordan/miop/'+lt+"/"+'DATA.csv', index = False)
##################################
